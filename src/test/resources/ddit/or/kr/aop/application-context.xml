<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

<!--
	1. 공통의 관심사항을 처리해줄 bean을 등록  : advice
	2. <aop:config
		<aop:point
		<aop:aspect 등록 
 -->
 
	<!-- advice -->
	<bean id="loggingAdvice" class="ddit.or.kr.aop.advice.LoggingAdvice"/>
	
	<!-- service -->
	<bean id="aopService" class="ddit.or.kr.aop.service.AopServiceImpl"/>
					
	<!--  ddit.or.kr.aop.service.AopService -->
	<!-- aop config -->
	<aop:config proxy-target-class="false" >
		<aop:pointcut id="loggingPoint" expression="execution(* ddit.or.kr.aop.service.*.* (..))" />
		<aop:aspect ref="loggingAdvice">			
			<aop:before pointcut-ref="loggingPoint" method="before" />
			<aop:after pointcut-ref="loggingPoint" method="after" />
			<aop:after-returning pointcut-ref="loggingPoint" method="afterReturnning" returning="retVal"/>
			<aop:after-throwing pointcut-ref="loggingPoint" method="afterThrowing" throwing="exception"/>
			<aop:around pointcut-ref="loggingPoint" method="around"/>
		</aop:aspect>
	</aop:config>
</beans>









